# Kernel compiler / linker flags
CFLAGS := 				 \
	-I ../libs/			 \
	-I ../kernel/		 \
	-I arch/$(ARCH)/	 \
	-I $(PLATFORM_DIR)	 \
	-std=gnu11			 \
	-O2	-pipe -g		 \
	-ffreestanding       \
	-fno-stack-protector \
	-fno-pic             \
	-mno-80387           \
	-mno-mmx             \
	-mno-3dnow           \
	-fpie				 \
	-lgcc				 \
	-mno-sse			 \
	-mno-sse2			 \
	-Wall				 \
	-fno-omit-frame-pointer \
	-mno-red-zone

ASMFLAGS := -felf64 -g -F dwarf -I arch/$(ARCH)/

LDINTERNALFLAGS :=  \
	-T $(BUILD_DIR)/link/link_$(ARCH)_$(BOARD).ld \
	-static         \
	-pie			\
	--no-dynamic-linker \
	-ztext			\
	-zmax-page-size=0x1000 \
	-nostdlib      

$(TARGET): $(OBJ)
	@printf " LD  Linking object files\n";
	@ld -r -b binary -o font.o ../font.bin
	$(LD) $(LDINTERNALFLAGS) $(OBJ) $(KLIBS) ./trace/symtable.o font.o -o $@
	python3 ../scripts/gensym.py $@
	$(LD) $(LDINTERNALFLAGS) $(OBJ) $(KLIBS) ./trace/symtable.o font.o -o $@

BOOT_IMAGE: $(KERNEL_ELF)
	$(MAKE) --no-print-directory -C $(LIMINE_DIR)
	rm -rf iso
	mkdir -p iso/boot
	cp -v $(KERNEL_ELF) iso/boot/
	mkdir -p iso/boot/limine
	cp -v boot/limine.cfg $(LIMINE_DIR)/limine-bios.sys $(LIMINE_DIR)/limine-bios-cd.bin $(LIMINE_DIR)/limine-uefi-cd.bin iso/boot/limine/
	cp -v -r boot/modules/ iso/
	cp -v -r boot/resources/ iso/
	mkdir -p iso/EFI/BOOT
	cp -v $(LIMINE_DIR)/BOOTX64.EFI iso/EFI/BOOT/
	cp -v $(LIMINE_DIR)/BOOTIA32.EFI iso/EFI/BOOT/
	xorriso -as mkisofs -b boot/limine/limine-bios-cd.bin \
		-no-emul-boot -boot-load-size 4 -boot-info-table \
		--efi-boot boot/limine/limine-uefi-cd.bin \
		-efi-boot-part --efi-boot-image --protective-msdos-label \
		iso -o $(ISO_NAME)
	$(LIMINE_DIR)/limine bios-install $(ISO_NAME)
	rm -rf iso
